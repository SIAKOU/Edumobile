

CREATE TABLE classes (
id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
name varchar(255) NOT NULL,
code varchar(50) UNIQUE,
level varchar(50),
section varchar(50),
school_year varchar(20),
student_count int DEFAULT 0,
teacher_id uuid, -- FK users
room varchar(50),
is_archived boolean DEFAULT false,
created_at timestamptz DEFAULT now(),
updated_at timestamptz DEFAULT now()
);

CREATE TABLE users (
id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
email varchar(255) UNIQUE NOT NULL,
username varchar(100) UNIQUE,
full_name varchar(255),
phone varchar(30),
avatar_url text,
role varchar(50) NOT NULL,
is_active boolean DEFAULT true,
created_at timestamptz DEFAULT now(),
updated_at timestamptz DEFAULT now(),
language varchar(10) DEFAULT 'fr',
class_id uuid REFERENCES classes(id) ON DELETE SET NULL,
address text
);

ALTER TABLE classes
  ADD CONSTRAINT fk_teacher FOREIGN KEY (teacher_id) REFERENCES users(id) ON DELETE SET NULL;

  CREATE TABLE class_info (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name varchar(255) NOT NULL,
  description text,
  code varchar(50) UNIQUE,
  school_id uuid,
  main_teacher_id uuid REFERENCES users(id) ON DELETE SET NULL,
  student_ids uuid[], -- Liste d'UUIDs d'élèves
  student_count int DEFAULT 0,
  level varchar(50),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  is_active boolean DEFAULT true
  );

  CREATE TABLE class_groups (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  class_id uuid REFERENCES classes(id) ON DELETE CASCADE,
  name varchar(255) NOT NULL,
  description text,
  student_ids uuid[], -- Liste d'UUIDs d'élèves
  teacher_id uuid REFERENCES users(id) ON DELETE SET NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  is_active boolean DEFAULT true
  );

  CREATE TABLE subjects (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name varchar(255) NOT NULL,
  code varchar(50) UNIQUE,
  description text,
  color varchar(20),
  teacher_id uuid REFERENCES users(id) ON DELETE SET NULL
  );

  CREATE TABLE schedules (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  class_id uuid REFERENCES classes(id) ON DELETE CASCADE,
  subject varchar(255),
  teacher_id uuid REFERENCES users(id) ON DELETE SET NULL,
  teacher varchar(255),
  start_time timestamptz NOT NULL,
  end_time timestamptz NOT NULL,
  location varchar(255),
  room varchar(50),
  description text,
  is_active boolean DEFAULT true
  );

  CREATE TABLE announcements (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  title varchar(255) NOT NULL,
  content text,
  author_id uuid REFERENCES users(id) ON DELETE SET NULL,
  class_id uuid REFERENCES classes(id) ON DELETE SET NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  deleted_at timestamptz,
  published_at timestamptz,
  is_active boolean DEFAULT true,
  attachments text[] -- URLs ou chemins de fichiers
  );

  CREATE TABLE assignments (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  title varchar(255) NOT NULL,
  due_date timestamptz,
  to_review_count int DEFAULT 0,
  description text,
  class_id uuid REFERENCES classes(id) ON DELETE CASCADE
  );

  CREATE TABLE attendance (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  student_id uuid REFERENCES users(id) ON DELETE CASCADE,
  class_id uuid REFERENCES classes(id) ON DELETE CASCADE,
  date date NOT NULL,
  status varchar(30) NOT NULL, -- présent, absent, excusé, etc.
  reason text,
  recorded_by uuid REFERENCES users(id) ON DELETE SET NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  is_active boolean DEFAULT true
  );

  CREATE TABLE grades (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  student_id uuid REFERENCES users(id) ON DELETE CASCADE,
  class_id uuid REFERENCES classes(id) ON DELETE CASCADE,
  subject_id uuid REFERENCES subjects(id) ON DELETE SET NULL,
  subject_name varchar(255),
  value float NOT NULL,
  max_value float DEFAULT 20,
  date date,
  teacher_id uuid REFERENCES users(id) ON DELETE SET NULL,
  comment text,
  type varchar(50),
  period varchar(50),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
  );

  CREATE TABLE payments (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  student_id uuid REFERENCES users(id) ON DELETE CASCADE,
  class_id uuid REFERENCES classes(id) ON DELETE SET NULL,
  description text,
  amount float NOT NULL,
  currency varchar(10) DEFAULT 'EUR',
  date timestamptz,
  payment_type varchar(50),
  recorded_by uuid REFERENCES users(id) ON DELETE SET NULL,
  receipt_url text,
  status varchar(30),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  is_active boolean DEFAULT true
  );

  CREATE TABLE message_threads (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  participant_ids uuid[], -- Liste d'UUIDs
  last_message_id uuid,
  last_message_preview text,
  last_message_at timestamptz,
  title varchar(255),
  image_url text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  is_group boolean DEFAULT false,
  is_active boolean DEFAULT true
  );

  CREATE TABLE chat_messages (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  thread_id uuid REFERENCES message_threads(id) ON DELETE CASCADE,
  sender_id uuid REFERENCES users(id) ON DELETE SET NULL,
  content text,
  sent_at timestamptz DEFAULT now(),
  is_read boolean DEFAULT false,
  attachments text[],
  type varchar(30),
  updated_at timestamptz,
  is_system boolean DEFAULT false
  );

  CREATE TABLE virtual_files (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  owner_id uuid REFERENCES users(id) ON DELETE SET NULL,
  class_id uuid REFERENCES classes(id) ON DELETE SET NULL,
  group_id uuid REFERENCES class_groups(id) ON DELETE SET NULL,
  name varchar(255),
  description text,
  url text NOT NULL,
  type varchar(50),
  size int,
  uploaded_at timestamptz DEFAULT now(),
  uploaded_by uuid REFERENCES users(id) ON DELETE SET NULL,
  updated_at timestamptz,
  is_active boolean DEFAULT true
  );

  -- =========================
  -- INDEXES
  -- =========================
  CREATE INDEX idx_users_email ON users(email);
  CREATE INDEX idx_classes_teacher_id ON classes(teacher_id);
  CREATE INDEX idx_attendance_student_id ON attendance(student_id);
  CREATE INDEX idx_grades_student_id ON grades(student_id);
  CREATE INDEX idx_virtual_files_owner_id ON virtual_files(owner_id);

  -- =========================
  -- TRIGGERS : Timestamps, Soft Delete, Compteurs, etc.
  -- =========================

  -- updated_at automatique
  CREATE OR REPLACE FUNCTION set_updated_at()
  RETURNS TRIGGER AS $$
  BEGIN
  NEW.updated_at = now();
  RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;

  -- created_at automatique
  CREATE OR REPLACE FUNCTION set_created_at()
  RETURNS TRIGGER AS $$
  BEGIN
  IF NEW.created_at IS NULL THEN
  NEW.created_at = now();
  END IF;
  RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;

  -- Soft delete pour announcements
  CREATE OR REPLACE FUNCTION soft_delete_announcements()
  RETURNS TRIGGER AS $$
  BEGIN
  NEW.deleted_at = now();
  NEW.is_active = false;
  RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;

  -- Mise à jour du compteur d’élèves dans classes
  CREATE OR REPLACE FUNCTION update_student_count()
  RETURNS TRIGGER AS $$
  BEGIN
  UPDATE classes
  SET student_count = (
  SELECT COUNT(*) FROM users WHERE class_id = NEW.class_id
  )
  WHERE id = NEW.class_id;
  RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;

  -- Archivage automatique si plus d’élèves
  CREATE OR REPLACE FUNCTION archive_class_if_empty()
  RETURNS TRIGGER AS $$
  BEGIN
  IF NEW.student_count = 0 THEN
  NEW.is_archived = true;
  END IF;
  RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;

  -- Cohérence des dates dans schedules
  CREATE OR REPLACE FUNCTION check_schedule_dates()
  RETURNS TRIGGER AS $$
  BEGIN
  IF NEW.end_time <= NEW.start_time THEN
  RAISE EXCEPTION 'La date de fin doit être postérieure à la date de début';
  END IF;
  RETURN NEW;
  END;
  $$ LANGUAGE plpgsql;

  -- Application des triggers sur les tables concernées
  -- updated_at
  DO $$
  DECLARE
  r RECORD;
  BEGIN
  FOR r IN SELECT tablename FROM pg_tables WHERE schemaname = 'public' AND tablename IN (
  'users', 'classes', 'class_info', 'class_groups', 'announcements', 'attendance', 'grades', 'payments', 'message_threads', 'chat_messages', 'virtual_files'
  )
  LOOP
    EXECUTE format('
    CREATE TRIGGER set_updated_at_%I
    BEFORE UPDATE ON %I
    FOR EACH ROW
    EXECUTE FUNCTION set_updated_at();
    ', r.tablename, r.tablename);
    END LOOP;
    END $$;

    -- created_at (exemple sur users, à dupliquer si besoin)
    CREATE TRIGGER set_created_at_users
    BEFORE INSERT ON users
    FOR EACH ROW
    EXECUTE FUNCTION set_created_at();

    -- Soft delete sur announcements
    CREATE TRIGGER soft_delete_announcements_trigger
    BEFORE DELETE ON announcements
    FOR EACH ROW
    EXECUTE FUNCTION soft_delete_announcements();

    -- Compteur d’élèves
    CREATE TRIGGER update_student_count_after_insert
    AFTER INSERT ON users
    FOR EACH ROW
    WHEN (NEW.class_id IS NOT NULL)
    EXECUTE FUNCTION update_student_count();

    CREATE TRIGGER update_student_count_after_delete
    AFTER DELETE ON users
    FOR EACH ROW
    WHEN (OLD.class_id IS NOT NULL)
    EXECUTE FUNCTION update_student_count();

    CREATE TRIGGER update_student_count_after_update
    AFTER UPDATE OF class_id ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_student_count();

    -- Archivage automatique
    CREATE TRIGGER archive_class_if_empty_trigger
    BEFORE UPDATE ON classes
    FOR EACH ROW
    EXECUTE FUNCTION archive_class_if_empty();

    -- Cohérence des dates
    CREATE TRIGGER check_schedule_dates_trigger
    BEFORE INSERT OR UPDATE ON schedules
    FOR EACH ROW
    EXECUTE FUNCTION check_schedule_dates();

    -- =========================
    -- RLS & POLICIES
    -- =========================

    ALTER TABLE users ENABLE ROW LEVEL SECURITY;
      ALTER TABLE classes ENABLE ROW LEVEL SECURITY;
        ALTER TABLE class_info ENABLE ROW LEVEL SECURITY;
          ALTER TABLE class_groups ENABLE ROW LEVEL SECURITY;
            ALTER TABLE subjects ENABLE ROW LEVEL SECURITY;
              ALTER TABLE schedules ENABLE ROW LEVEL SECURITY;
                ALTER TABLE announcements ENABLE ROW LEVEL SECURITY;
                  ALTER TABLE assignments ENABLE ROW LEVEL SECURITY;
                    ALTER TABLE attendance ENABLE ROW LEVEL SECURITY;
                      ALTER TABLE grades ENABLE ROW LEVEL SECURITY;
                        ALTER TABLE payments ENABLE ROW LEVEL SECURITY;
                          ALTER TABLE message_threads ENABLE ROW LEVEL SECURITY;
                            ALTER TABLE chat_messages ENABLE ROW LEVEL SECURITY;
                              ALTER TABLE virtual_files ENABLE ROW LEVEL SECURITY;

                                -- Exemples de policies (à adapter selon tes besoins)

                                -- USERS
                                CREATE POLICY "Users: read own or admin"
                                ON users
                                FOR SELECT
                                USING (
                                auth.uid() = id
                                OR EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND u.role = 'admin')
                                );

                                CREATE POLICY "Users: update own or admin"
                                ON users
                                FOR UPDATE
                                USING (
                                auth.uid() = id
                                OR EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND u.role = 'admin')
                                );

                                -- CLASSES
                                CREATE POLICY "Classes: read for members or admin"
                                ON classes
                                FOR SELECT
                                USING (
                                EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND (u.class_id = id OR u.role = 'admin'))
                                );

                                CREATE POLICY "Classes: update by admin or teacher"
                                ON classes
                                FOR UPDATE
                                USING (
                                EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND (u.role = 'admin' OR u.role = 'teacher'))
                                );

                                -- VIRTUAL FILES
                                CREATE POLICY "VirtualFiles: read by owner, uploader, admin"
                                ON virtual_files
                                FOR SELECT
                                USING (
                                owner_id = auth.uid()
                                OR uploaded_by = auth.uid()
                                OR EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND u.role = 'admin')
                                );

                                CREATE POLICY "VirtualFiles: update by owner, uploader, admin"
                                ON virtual_files
                                FOR UPDATE
                                USING (
                                owner_id = auth.uid()
                                OR uploaded_by = auth.uid()
                                OR EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND u.role = 'admin')
                                );

                                CREATE POLICY "VirtualFiles: insert by authenticated"
                                ON virtual_files
                                FOR INSERT
                                WITH CHECK (
                                auth.role() = 'authenticated'
                                );

                                -- ATTENDANCE
                                CREATE POLICY "Attendance: read by student, teacher, admin"
                                ON attendance
                                FOR SELECT
                                USING (
                                student_id = auth.uid()
                                OR EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND (u.role = 'admin' OR u.role = 'teacher'))
                                );

                                -- GRADES
                                CREATE POLICY "Grades: read by student, teacher, admin"
                                ON grades
                                FOR SELECT
                                USING (
                                student_id = auth.uid()
                                OR teacher_id = auth.uid()
                                OR EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND u.role = 'admin')
                                );

                                -- ANNOUNCEMENTS
                                CREATE POLICY "Announcements: read for class members or admin"
                                ON announcements
                                FOR SELECT
                                USING (
                                EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND (u.class_id = class_id OR u.role = 'admin'))
                                );

                                CREATE POLICY "Announcements: update by author or admin"
                                ON announcements
                                FOR UPDATE
                                USING (
                                author_id = auth.uid()
                                OR EXISTS (SELECT 1 FROM users u WHERE u.id = auth.uid() AND u.role = 'admin')
                                );

                                -- CHAT MESSAGES
                                CREATE POLICY "ChatMessages: read for thread members"
                                ON chat_messages
                                FOR SELECT
                                USING (
                                EXISTS (
                                SELECT 1 FROM message_threads t
                                WHERE t.id = thread_id AND auth.uid() = ANY(t.participant_ids)
                                )
                                );

                                -- Ajoute d'autres policies selon tes besoins métier

